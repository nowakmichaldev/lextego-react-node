{
	"root": true,
	"ignorePatterns": [
		"dist/**/*",
		"*.js"
	],
	"overrides": [
		{
			"files": [
				"*.ts"
			],
			"plugins": [
				"prefer-arrow",
				"import"
			],
			"parserOptions": {
				"project": [
					"tsconfig.json"
				],
				"createDefaultProgram": true
			},
			"extends": [
				"eslint:recommended",
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/recommended-requiring-type-checking",
				"plugin:prettier/recommended"
			],
			"rules": {
				"import/order": [
					"error",
					{
						"groups": ["builtin", "external", "internal", "sibling"],
						"pathGroupsExcludedImportTypes": ["builtin"],
						"alphabetize": {
							"order": "asc",
							"caseInsensitive": true
						},
						"newlines-between": "always"
					}
				],
				"quotes": "off",
				"prefer-arrow-callback": "error",
				"prefer-arrow/prefer-arrow-functions": [
					"error",
					{
						"disallowPrototype": true,
						"singleReturnOnly": false,
						"classPropertiesAllowed": false
					}
				],
				"arrow-body-style": ["error", "as-needed"],
				"@typescript-eslint/no-explicit-any": "warn",
				"@typescript-eslint/no-unsafe-member-access": "warn",
				"@typescript-eslint/unbound-method": [
					"error",
					{
						"ignoreStatic": true
					}
				],
				"@typescript-eslint/comma-spacing": ["error", {"before": false, "after": true}],
				"@typescript-eslint/no-unused-vars": "warn",
				"@typescript-eslint/no-require-imports": "error",
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "variable",
						"format": ["camelCase", "PascalCase", "UPPER_CASE"],
						"leadingUnderscore": "allow"
					},
					{
						"selector": "variable",
						"types": ["boolean"],
						"format": ["camelCase", "PascalCase", "UPPER_CASE"],
						"prefix": ["is", "should", "has", "can", "did", "will", "IS", "SHOULD", "HAS", "CAN", "DID", "WILL"]
					},
					{
						"selector": "memberLike",
						"modifiers": ["private"],
						"format": ["camelCase"],
						"leadingUnderscore": "require"
					},
					{
						"selector": "interface",
						"format": ["PascalCase"],
						"suffix": ["Interface"]
					},
					{
						"selector": "enum",
						"format": ["PascalCase", "UPPER_CASE"],
						"suffix": ["Enum", "_ENUM"]
					},
					{
						"selector": "typeAlias",
						"format": ["PascalCase"],
						"suffix": ["Type"]
					}
				]
			}
		}
	]
}
